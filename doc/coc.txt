*coc-nvim.txt*				LSP support for vim & neovim.

Version: 0.0.47
Author: Qiming Zhao <chemzqm at gmail.com>
License: MIT license

CONTENTS					*coc-contents*

Introduction					|coc-introduction|
Requirement					|coc-requirement|
Install						|coc-install|
Configuration 					|coc-configuration|
Completion   					|coc-completion|
LanguageServer 					|coc-languageserver|
Interface					|coc-interface|
  Keymapings 					|coc-keymappings|
  Variables					  |coc-variables|
  Functions					  |coc-functions|
  Commands					  |coc-commands|
  Autocmds 					  |coc-autocmds|
  Highlights 					  |coc-highlights|
List 						|coc-list|
  List command 					|coc-list-command|
  List configuration 				|coc-list-configuration|
  List mappings 				|coc-list-mappings|
  List sources 					|coc-list-sources|
    Location 		   			 |coc-list-location|
    Extensions 					 |coc-list-extensions|
    Diagnostics					 |coc-list-diagnostics|
    Outline 					 |coc-list-outline|
    Symbols 					 |coc-list-symbols|
    Services 					 |coc-list-services|
    Commands 					 |coc-list-commands|
    Links 					 |coc-list-links|
    Output 					 |coc-list-output|
    Sources 					 |coc-list-sources|
    Lists 					 |coc-list-lists|
Statueline support      			|coc-status|
  Manual                			|coc-status-manual|
  Airline 					|coc-status-airline|
  Lightline  					|coc-stauts-lightline|
Faq						|coc-faq|
Changelog					|coc-changelog|

==============================================================================
INTRODUCTION					*coc-introduction*

Coc.nvim tries to provide best experience of LSP features, especially for
completion.

It works with extensions featured as extensions of VSCode, and
you can configure coc to work with custom language server as well.

==============================================================================
REQUIREMENT					*coc-requirement*

Note: this plugin requires neovim > 0.3 or vim > 8.1.

If not satisfied, the plugin would not be loaded at all.

==============================================================================
INSTALL						*coc-install*

Use plugin manager, like https://github.com/junegunn/vim-plug by add: >

  Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

to your `init.vim` and run: >

  :PlugInstall

For other plugin manager, run `:coc#util#install()` after plugin is loaded,
this command would download latest coc binary from github release page.

==============================================================================
CONFIGURATION					*coc-configuration*

The same as VSCode, Coc use jsonc formated file named `coc-settings.json` for
configuration.

Use command |:CocConfig| to open user configuration file, or create
`.vim/coc-settings.json` for workspace configuration.

Autocompletion of json file would be enabled after `coc-json` extension
installed.

Check out https://github.com/neoclide/coc.nvim/wiki/Using-configuration-file
for detail.

==============================================================================
COMPLETION					*coc-completion*

The completion of coc is triggered automatically by default, you can change
some of completion behavior be using configuration file.

To disable automatic trigger, use: >

	"coc.preferences.autoTrigger": "none",
<
To enable trigger after insert enter, use: >

	"coc.preferences.triggerAfterInsertEnter": true,

To change the timeout of completion, use: >

	"coc.preferences.timeout": 500,
<
To make the first complete item selected automatically, use: >

	"coc.preferences.noselect": false,
<
To make completion triggered with two input characters, use: >

	"coc.preferences.minTriggerInputLength": 2
<
To enable commit characters feature, use: >

	"coc.preferences.acceptSuggestionOnCommitCharacter": true
<
To change the indicator of snippet item, use: >

	"coc.preferences.snippetIndicator": "⭐︎"

------------------------------------------------------------------------------

Configure your vim to improve completion experience:

Setup kepmap for trigger completion, use: >

	inoremap <silent><expr> <c-space> coc#refresh()
<
Use `<cr>` for confirm completion, use: >

	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"
<
Note: `snippet` and `additionalTextEdit` feature only work after completion is
confirmed.

Use <C-j> and <C-k> to jump forward and backward of snippet placeholders: >

	let g:coc_snippet_next = '<c-j>'
	let g:coc_snippet_prev = '<c-k>'

Check out https://github.com/neoclide/coc.nvim/wiki/Configuration-of-completion
for more tips.

==============================================================================
INTERFACE					*coc-interface*

------------------------------------------------------------------------------

Coc doesn't comes with default global keymap, you need to configure yourself.

Keymapings 					*coc-keymappings*

Note: Mapping starts with 'i_' works for insert mode 'n_' works for normal
mode, 'v_' works for visual mode.

<Plug>(coc-diagnostic-info) 			*n_coc-diagnostic-info*

			Show diagnostic message of current position, no
			truncate.

<Plug>(coc-diagnostic-next) 			*n_coc-diagnostic-next*
			
			Jump to next diagnostic position.

<Plug>(coc-diagnostic-prev) 			*n_coc-diagnostic-prev*
			
			Jump to previous diagnostic position.

<Plug>(coc-definition) 				*n_coc-definition*

			Jump to definition(s) of current symbol.

<Plug>(coc-declaration) 			*n_coc-declaration*

			Jump to declaration(s) of current symbol.

<Plug>(coc-implementation) 			*n_coc-implementation*

			Jump to implementation(s) of current symbol.

<Plug>(coc-type-definition) 			*n_coc-type-definition*

			Jump to type definition(s) of current symbol.

<Plug>(coc-references) 				*n_coc-references*

			Jump to references of current symbol.

<Plug>(coc-format-selected) 			*n_coc-format-selected*
						*v_coc-format-selected*

			Format selected range, would work in both visual mode
			and normal mode, when work in normal mode, the
			selections works on motion object.

	For example: >

	vmap <leader>p  <Plug>(coc-format-selected)
	nmap <leader>p  <Plug>(coc-format-selected)
<
	makes `<leader>p` format visual selected range, and you can use
	`<leader>pap` to format a paragraph.

<Plug>(coc-format) 				*n_coc-format*

			Format whole buffer, normally you would like to use a
			command like: >

	command! -nargs=0 Format :call CocAction('format')
<
			to format current buffer.

<Plug>(coc-rename) 				*n_coc-rename*

			Rename symbol under cursor to a new word.

<Plug>(coc-codeaction) 				*n_coc-codeaction*

			Get and run code action(s) for current line.

<Plug>(coc-codeaction-selected) 		*n_coc-codeaction-selected*
						*v_coc-codeaction-selected*

			Get and run code action(s) with selected region.
			Works with both normal and visual mode.


<Plug>(coc-openlink) 				*n_coc-openlink*

			Open link under cursor.

<Plug>(coc-codelens-action) 			*n_coc-codelens-action*

			Do command from codeLens of current line.

<Plug>(coc-fix-current) 			*n_coc-fix-current*

			Try run quickfix action for diagnostics in current
			line.

------------------------------------------------------------------------------
VARIABLES 					*coc-variables*

g:coc_start_at_startup 				*g:coc_start_at_startup*

			Start coc service on startup, use |CocStart| to start
			server when you set it to 0.

			Default: 1

g:coc_user_config 				*g:coc_user_config*


			User configuration object, define this variable when
			you can't use |coc#config()|

g:coc_global_extensions 			*g:coc_global_extensions*

			Global extension names, define this variable to
			list of extension names when you can't use
			|coc#add_extension()|
g:coc_enable_locationlist 			*g:coc_enable_locationlist*

			Open location list when locations changes.

			Default: 1

g:coc_snippet_next                            	*g:coc_snippet_next*

			Trigger key for goto next snippet position, applied
			on insert and select mode.

			Only works when snippet session is activated.

			Default: <C-j>

g:coc_snippet_prev                            	*g:coc_snippet_prev*

			Trigger key for goto previous snippet position,
			applied on insert and select mode.

			Only works when snippet session is activated.

			Default: <C-k>

g:coc_filetype_map 				*g:coc_filetype_map*

			Map for document filetype so server could handle
			current document as other filetype, ex: >
			
			let g:coc_filetype_map = {
				\ 'html.swig': 'html',
				\ 'wxss': 'css',
				\ }
<
			Default: {}

			Note: coc will always map filetype `javascript.jsx` to
			`javascriptreact` and `typescript.tsx` to
			`typescriptreact`.

g:coc_selectmode_mapping			*g:coc_selectmode_mapping*

			Add key mappings for make snippet select mode easier.  >
			
			snoremap <silent> <BS> <c-g>c
			snoremap <silent> <DEL> <c-g>c
			snoremap <silent> <c-h> <c-g>c
			snoremap <c-r> <c-g>"_c<c-r>
<
			Default: 1

g:coc_node_path 				*g:coc_node_path*

			Path to node executable to start coc service. ex: >

			let g:coc_node_path = '/usr/local/opt/node@10/bin/node'
<
			Use this when coc have problem with your system node,
			it doen't take effect if coc service started by binary
			build of coc.

			Note: not work when using binary release.

g:coc_force_debug  				*g:coc_force_debug*

			Coc would use precompiled binary when the binary file
			exists, set this to 1 to use compiled code instead of
			prebuild binary.

			Default: 0

g:coc_node_args 				*g:coc_node_exec_args*

			Arguments passed to node when starting coc
			service from source code.

			Useful for start coc in debug mode, ex: >
			
			let g:coc_node_args = ['--nolazy', '--inspect-brk=6045']
<

			Default: []


g:vim_node_rpc_folder 				*g:vim_node_rpc_folder*

			Folder contains `vim-node-rpc` module, used for speed
			up vim startup.

			If not defined, the folder is resolved from yarn
			global directory.

			Default: undefined

g:coc_jump_locations 				*g:coc_jump_locations*

			This variable would be set to jump locations when
			autocmd |CocLocationsChange| fired.

			Each location item contains:

			'filename': full file path.
			'lnum': line number (1 based).
			'col': column number(1 based).
			'text':  line content of location.

g:coc_process_pid 				*g:coc_process_pid*

			Process pid of coc service.

------------------------------------------------------------------------------

Some variables are provided by coc.nvim so your can use them in your
statusline. See |coc-status| for detail.

b:coc_diagnostic_info 				*b:coc_diagnostic_info*

			Diagnostic information of current buffer, the format
			would like:

			`{'error': 0, 'warning': 0, 'information': 0, 'hint':0}`

			can be used for customize statusline. See |coc-status|.

g:coc_status 					*g:coc_status*

			Status string contributed by extensions, used for
			status line.

==============================================================================
FUNCTIONS 					*coc-functions*

Coc functions are normally used by user defined command/keymap or other
plugins.

Note: some functions only work after coc service initialized.

To run a function on startup, use autocmd like: >

 	autocmd User CocNvimInit call s:CocAction('runCommand',
						\ 'tsserver.watchBuild')
<
						*CocRequest()*
CocRequest({id}, {method}, [{params}])

	Send request to language client of {id} with {method} and optional
	{params}. eg: >

	call CocRequest('tslint', 'textDocument/tslint/allFixes',
		\  {'textDocument': {'uri': 'file:///tmp'}})
<
	vim error would raise when request response with error.

						*CocRequestAsync()*
CocRequestAsync({id}, {method}, [{params}, [{callback}]])

	Async request for remote language client. {callback} is called with
	error and response.

						*CocLocations()*
CocLocations({id}, {method}, [{params}, {openCommand}])

	Send location request to language client of {id} with
	{method} and optional {params}. eg: >

	call CocLocations('ccls', '$ccls/call',  {'callee': v:true})

	call CocLocations('ccls', '$ccls/call',  {}, 'vsplit')
<
	{openCommand}: optional command to open buffer, default to
	`coc.preferences.openResourceCommand` (|:edit| by default)

						*CocAction()*
CocAction({action}, [...{args}])

	Run {action} of coc with optional extra {args}.

						*CocActionAsync()*

CocActionAsync({action}, [...{args}, [{callback}]])

	Call CocAction without block vim UI, callback is called
	with `error` as first argument and `response` as second argument.

------------------------------------------------------------------------------

Available Actions ~

"sourceStat" 					*coc-action-sourceStat*
	
	get the list of completion source stats for current buffer.

"refreshSource" [{source}]  			*coc-action-refreshSource*

	refresh all sources or {source} as name of source.

"toggleSource" {source} 			*coc-action-toggleSource*

	enable/disable {source}.

"diagnosticList" 				*coc-action-diagnosticList*

	Get all diagnostic items of current neovim session.

"diagnosticInfo" 				*coc-action-diagnosticInfo*

	Show diagnostic message at current position, no truncate.

"jumpDefinition" [{openCommand}] 		*coc-action-jumpDefinition*

	jump to definition position of current symbol.

	|coc-list| is used when more than one position available.

	{openCommand}: optional command to open buffer, default to
	`coc.preferences.openResourceCommand` in `coc-settings.json`

"jumpDeclaration" [{openCommand}] 		*coc-action-jumpDeclaration*

	jump to declaration position of current symbol.

	same behavior as "jumpDefinition"

"jumpImplementation" [{openCommand}] 		*coc-action-jumpImplementation*

	Jump to implementation position of current symbol.

	same behavior as "jumpDefinition"

"jumpTypeDefinition" [{openCommand}] 		*coc-action-jumpTypeDefinition*

	Jump to type definition position of current symbol.

	same behavior as "jumpDefinition"

"jumpReferences" [{openCommand}]		*coc-action-jumpReferences*

	Jump to references position of current symbol.

	same behavior as "jumpDefinition"

"doHover" 					*coc-action-doHover*

	Show documentation of current word at preview window.

	Use `coc.preferences.hoverTarget` to change hover behavior.

	Note: the behavior would change when floating windows available for
	neovim.

"showSignatureHelp" 				*coc-action-showSignatureHelp*

	Echo signature help of current function, you may want to setup autocmd
	like this: >

	autocmd CursorHoldI,CursorMovedI * call CocAction('showSignatureHelp')
<

"documentSymbols" 				*coc-action-documentSymbols*

	Get symbol list of current document.

"rename" 					*coc-action-rename*

	Do rename for symbol under cursor position, user would be prompted for
	new name.

"workspaceSymbols" 				*coc-action-workspaceSymbols*

	Search for workspace symbols.

"services" 					*coc-action-services*

	Get all services information list.

"toggleService" {serviceId} 			*coc-action-toggleService*

	Start or stop service.

"format" 					*coc-action-format*

	Format current buffer using language server.

"formatSelected" [{mode}] 			*coc-action-formatSelected*

	Format selected range, {mode} should be one of visual mode: `v` , `V`,
	`char`, `line`.

	When {mode} omited, it should be called using |formatexpr|.
	

"codeAction" [{mode}] 				*coc-action-codeAction*

	prompty for a code action and do it.

	{mode} should be result of visualmode(), when used in visualmode,
	could be empty string for none visualmode.


"codeLensAction" 				*coc-action-codeLensAction*


	Invoke command for codeLens of current line (or the line contains
	codeLens just before). Prompt would be shown when multiple actions
	available.

"commands" 					*coc-action-commands*

	Get available service command id list of current buffer.

"runCommand" [{name}] 				*coc-action-runCommand*

	Run global command provided by language server, if {name} not
	provided, a prompt of command list is shown for select.

	You can bind your custom command like: >

	command! -nargs=0 OrganizeImport :call CocAction('runCommand', 'typescript.organizeImports')

"fold" {{kind}} 				*coc-action-fold*

	Fold current buffer, optional use {kind} for filter folds, {kind}
	could be 'comment', 'imports' and 'region'

"highlight" 					*coc-action-highlight*

	Highlight symbols under cursor.  To use different colors, overwrite
	highlight groups: `CocHighlightText`, `CocHighlightRead` and
	`CocHighlightWrite`

	To enable highlight on CursorHold, create autocmd like: >

	autocmd CursorHold * silent call CocAction('highlight')
<
"openLink" [{command}] 				*coc-action-openlink*

	Open link under cursor with {command}.
	{command} default to `edit`.
	File and url links are supported.
	
"extensionStats" 				*coc-action-extensionStats*

	Get all extension states as list. Including `id`, `root` and `state`

	State could be `disabled`, `activated` and `loaded`

"toggleExtension" {id} 				*coc-action-toggleExtension*

	Enable/disable an extension.

"uninstallExtension" {id} 			*coc-action-uninstallExtension*

	Uninstall an extension.

"reloadExtension" {id} 				*coc-action-reloadExtension*

	Reload activated extension.

"deactivateExtension" {id} 			*coc-action-deactivateExtension*

	Deactivate extension of {id}.

"pickColor" 					*coc-action-pickColor*

	Change color at current color position.

	Requires language server support document color request.

"colorPresentation"  				*coc-action-colorPresentation*

	Change color presentation at current color position.

	Requires language server support color representation request.

"quickfixes" 					*coc-action-quickfixes*

	Get all quickfix codeActions of current buffer.

	Could be used with |CocDiagnosticChange| autocmd to get available fix
	actions.

"doCodeAction" {codeAction} 			*coc-action-doCodeAction*

	Do a codeAction.

"doQuickfix" 					*coc-action-doQuickfix*

	Run quickfix actions of current line.

------------------------------------------------------------------------------

						*coc#config()*
coc#config({section}, {value})

	Change user configuration by vim script, no changes would be made to
	user configuration file. ex: >

	call coc#config('coc.preferences', {
		\ 'timeout': 1000,
		\ 'hoverTarget': 'echo',
		\})
	call coc#config('languageserver', {
		\ 'ccls': {
		\   "command": "ccls",
		\   "trace.server": "verbose",
		\   "filetypes": ["c", "cpp", "objc", "objcpp"]
		\ }
		\})
<

	Note: this function could be called multiple times.

	Note: this function could be called before service initialized.

	Note: this function could works with user configuration file, but it's
	not recommended to use both.

coc#add_extension({name}, ...)

	Config extensions to install, a terminal buffer would be opened to
	install missing extensions after service started, ex: >

  	call coc#add_extension('coc-json', 'coc-tsserver', 'coc-rls')
<
	This function could be called before service initialized.
	This function could be called multiple times.

						*coc#refresh()*
coc#refresh()

	Start or refresh completion at current cursor position, bind this to
	'imap' for trigger completion, ex: >

	inoremap <silent><expr> <c-space> coc#refresh()
<
						*coc#status()*
coc#status()

	Return status string for used in status line, the status
	including diagnostic information from `b:coc_diagnostic_info`
	and extension contributed status from `g:coc_status`,
	for statusline integration, see |coc-status|

						*health#coc#check()*
health#coc#check()
	
	Neovim only, run health check, triggered by ':checkhealth'
	command.

------------------------------------------------------------------------------

COMMANDS 					*coc-commands*

:CocStart 					*:CocStart*

		Start coc server, do nothing if it's already started.

:CocDisable 					*:CocDisable*

		Disable all events of coc

:CocEnable 					*:CocEnable*

		Enable events of coc

:CocRestart 					*:CocRestart*

		Restart coc service.

		Use this command when you want coc start all over again.

:CocConfig 					*:CocConfig*

		Edit user config file `coc-setting.json`

:CocInstall {name} ... 				*:CocInstall*

		Install one or more coc extensions.

		Checkout https://www.npmjs.com/search?q=keywords%3Acoc.nvim for
		available extensions.

:CocUninstall {name} 				*:CocUnInstall*

		Uninstall an extension, use <tab> to complete extension name.

:CocUpdate 					*:CocUpdate*

		Update all coc extensions to latest version.

:CocRebuild 					*:CocRebuild*

		Run `npm rebuild` for coc extensions.

		May required if coc not started by binary and environment
		nodejs get upgraded.

:CocCommand {name} [{args}] ...			*:CocCommand*

		Run command contributed by extensions, use `<tab>` for name
		completion.

:CocOpenLog 					*:CocOpenLog*

		Open log file of coc.nvim, to change log level (default `info`),
		use environment variable `NVIM_COC_LOG_LEVEL`. ex: >
		
		export NVIM_COC_LOG_LEVEL=debug
<
		or add: >
		
		let $NVIM_COC_LOG_LEVEL='debug'
<
		at the beggining of your `.vimrc` (before plugin loaded).

		The log file is cleared after vim started, to get the log file
		in your terminal, run command: >

		node -e 'console.log(path.join(os.tmpdir(), "coc-nvim.log"))'
		
<
:CocInfo 					*:CocInfo*

		Show version and log information in split window, useful for
		bug report.

------------------------------------------------------------------------------

AUTOCMD 					*coc-autocmds*

						*CocLocationsChange*


:autocmd User CocLocationsChange {command}

		For build custom view of locations, set |g:coc_enable_locationlist|
		to 0 and use this autocmd with with |g:coc_jump_locations|

		For example, to enable auto preview for coc list, use:
>
		let g:coc_enable_locationlist = 0
		autocmd User CocLocationsChange CocList --normal -A location
<

						*CocNvimInit*
:autocmd User CocNvimInit {command}

		Triggered after coc services started.

		If you want trigger action of coc after vim started, this
		autocmd should be used because coc always start in async.

						*CocDiagnosticChange*

:autocmd User CocDiagnosticChange {command}

		Triggered after diagnostic status changed.

		Could be used for update statusline.

						*CocJumpPlaceholder*

:autocmd User CocJumpPlaceholder {command}

		Triggered after jump placeholder. Can be used for trigger
		signature help like: >

	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

------------------------------------------------------------------------------

HIGHLIGHTS 					*coc-highlights*

CocErrorSign 					*CocErrorSign*

  Default: `hi CocErrorSign  ctermfg=Red guifg=#ff0000`

  The highlight used for error signs.

CocWarningSign 					*CocWarningSign*

  Default: `hi CocWarningSign  ctermfg=Brown guifg=#ff922b`

  The highlight used for warning signs.

CocInfoSign 					*CocInfoSign*

  Default: `hi CocInfoSign  ctermfg=Yellow guifg=#fab005`

  The highlight used for information signs.

CocHintSign 					*CocHintSign*

  Default: `hi CocHintSign  ctermfg=Blue guifg=#15aabf`

  The highlight used for hint signs.

CocErrorHighlight 				*CocErrorHighlight*

  Default: `hi default link CocErrorHighlight   CocUnderline`

  The highlight used for error text.

CocWarningHighlight 				*CocWarningHighlight*

  Default: `hi default link CocWarningHighlight   CocUnderline`

  The highlight used for warning text.

CocInfoHighlight 				*CocInfoHighlight*

  Default: `hi default link CocInfoHighlight   CocUnderline`

  The highlight used for information text.

CocHintHighlight 				*CocHintHighlight*

  Default: `hi default link CocHintHighlight   CocUnderline`

  The highlight used for hint text.

CocHighlightText 				*CocHighlightText*

  Default `hi default CocHighlightText  guibg=#111111 ctermbg=223`

  The highlight used for document highlight feature, normally used for
  highlight same symbols of buffer at current cursor position.

CocHighlightTextRead 				*CocHighlightTextRead*

  Default `hi default link CocHighlightRead  CocHighlightText`

  Highlight for `Read` kind of document symbol.

CocHighlightTextWrite 				*CocHighlightTextWrite*

  Default `hi default link CocHighlightWrite  CocHighlightText`

  Highlight for `Write` kind of document symbol.

CocErrorLine 					*CocErrorLine*

  Default `undefined`

  Highlight for line with diagnostic error.

CocWarningLine 					*CocWarningLine*

  Default `undefined`

  Highlight for line with diagnostic warning.

CocInfoLine 					*CocInfoLine*

  Default `undefined`

  Highlight for line with diagnostic information.

CocHintLine 					*CocHintLine*

  Default `undefined`

  Highlight for line with diagnostic hint.

CocCodeLens 					*CocCodeLens*

  Default: ``ctermfg=Gray    guifg=#999999`

  Highlight group of virtual text for codeLens.

To customize the highlight, simply use |:highlight| command of vim in your
vimrc, like: >
	
	" make error text to red color
	highlight CocErrorHighlight ctermfg=Red  guifg=#ff0000
<

==============================================================================
LIST SUPPORT 					*coc-list*

Build in list support make work with list of items easier.

Following features are supported:

* Two modes: insert & normal.
* Default keymappings for insert & normal mode.
* Cutomize keymappings for insert & normal mode.
* Build in actions for locations.
* Options for CocList command.
* Select action by <tab>.
* Multiple selection by <space> on normal mode.

------------------------------------------------------------------------------

LIST COMMAND 					*coc-list-command*

:CocList [{...options}] [{source}] [{...args}] 		*CocList*

		Open coc list of {source}, Ex: >

		:CocList --normal location
<
		For current jump locations.

		See |coc-list-command-options| for available list options, 

		{args} are send to source during fetch list.

		If {source} is empty, lists source is used.

:CocListResume 						*CocListResume*

		Reopen last opened list, input and cursor position would
		be preserved.

:CocPrev 						*CocPrev*

		Invoke default action for previous item in last list.

		Doesn't open list window if it's closed.

:CocNext 						*CocNext*

		Invoke default action for next item in last list.

		Doesn't open list window if it's closed.

Command options 			*coc-list-command-options*

--top
	Show list in top window.

--normal
	Start list in normal mode, recommended for short list.

--no-sort
	Disable sort by fuzzy score, useful for mru list.

--input={input}
	Specify input on session start.

--strictMatch
-S
	Use strict match instead of fuzzy match.

--regex
-R
	Use regex match instead of fuzzy match.

--ignore-case
	Ignore case when using strict match or regex match.

--number-select
-N
	Type line number to select item and invoke default action on insert
	mode.


--interactive
-I
	Use interactive mode, list items would be reloaded on input
	change, filter and sort would be done by list implementation.

	Note: it won't work if list doesn't support interactive.

	Note: filter and sort would be done by remote service.

--auto-preview
-A
	Start preview for current item on list visible.

------------------------------------------------------------------------------

LIST CONFIGURATION 				*coc-list-configuration*


Coc list just works, you can use `coc-settings.json` for configuration. For
best experience, install `coc-json` extension is recommended.

The following settings are available:

- `"list.indicator"`: The characer used as first characer in prompt line

	default: `>`

- `"list.maxHeight"`: Maxmium height of list window.

	default: 12

- `"list.autoPreview"`: Enable auto preview on cursor move.

	default: `true`

- `"list.autoResize"`: Enable window auto resize on buffer change.

	default: `true`

- `"list.nextKeymap"`: Key used for select next line on insert mode.

	default: <C-j>

- `"list.previousKeymap"`: Key used for select previous line on insert mode.

	default: <C-k>

- `"list.normalMappings"`: User defined keymappings on normal mode.

	defined: `{}`

	Checkout |coc-list-mappings-custom| for detail.

- `"list.insertMappings"`: User defined keymappings on insert mode.

	defined: `{}`

	Checkout |coc-list-mappings-custom| for detail.

------------------------------------------------------------------------------

LIST MAPPINGS 					*coc-list-mappings*

Default mappings on insert mode:

<Esc>       - cancel list session.
<C-c>       - stop loading task.
<C-l>       - reload list.
<C-o>       - change to normal mode.
<Down>      - select next line.
<Up>        - select previous line.
<Left>      - move cursor left.
<Right>     - move cursor right.
<End>       - move cursor to end of prompt.
<C-e>       - same as <End >.
<Home>      - move cursor to start of prompt.
<C-a>       - same as <Home>.
<C-f>       - scroll window forward.
<C-b>       - scroll window backward.
<Backspace> - remove previous characer of cursor.
<C-h>       - remove previous characer of cursor.
<C-w>       - remove previous word of cursor.
<C-k>       - remove characers after cursor.
<C-u>       - remove characers before cursor.
<C-n>       - navigate to next input in history.
<C-p>       - navigate to previous input in history.
<Tab>       - select action.
<Space>     - toggle select of current item.

Default mappings on normal mode:

<Esc>       - cancel list session.
<C-c>       - stop source from fetching more items.
<C-l>       - reload list.
<Tab>       - select action.
<Space>     - toggle select of current item.
i,I,o,O,a,A - change to insert mode.
p           - preview action.
:           - cancel list session without closing window.

Use |coc-list-mappings-custom| to override default mappings.

						*coc-list-mappings-custom*

Configurations `"list.normalMappings"` and `"list.insertMappings"` are used
for customize list keymappings, ex: >

	"list.insertMappings": {
		"<C-r>": "do:refresh",
		"<C-f>": "feedkeys:\\<C-f>",
		"<C-b>": "feedkeys:\\<C-b>",
		"<C-n>": "normal:j",
		"<C-p>": "normal:k",
		"<C-t>": "action:tabe",
		"<C-x>": "call:MyFunc"
	}
	"list.normalMappings": {
		"c": "expr:MyExprFunc"
		"d": "action:delete"
	}
<
Note: you should only use keys starts with `<C-` or `<A-` for insert mappings.

The mapping expression should be `command:arguments`, available commands:

'do' - special actions provided by coc list, including:
	'refresh' - reload list.
	'exit' -  exit list session.
	'stop' - stop loading task.
	'cancel' - cancel list session but leave list window open.
	'toggle' - toggle selection of current item.
	'previous' - move cursor to previous item.
	'next' - move cursor to next item.
	'defaultaction' - execute default action.
'prompt' - do prompt action, including:
	'previous' - change to previous input in history.
	'next' - change to next input in history.
	'start' - move cursor to start.
	'end' - move cursor to end.
	'left' - move cursor left.
	'right' - move cursor right.
	'deleteforward' - remove previous characer.
	'deletebackward' - remove next characer.
	'removetail' - remove characers afterwards.
	'removeahead' - remove characer ahead.
'action' - execute action of list, use <tab> to find available actions.
'feedkeys' - feedkeys to list window, use `\\` in json to escape special characer.
'normal' - execute normal command in list window.
'normal!' -  execute normal command without remap.
'call' - call vim function with |coc-list-context| as only argument.
'expr' - same as 'call' but expect the function return action name.

						*coc-list-context*

Context argument contains following properties:

'name' - name of list, ex: `'location'`.
'args' - arguments of list.
'input' - current input of prompt.
'winid' - window id on list activated.
'bufnr' - buffer number on list activated.
'targets' - list of selected targets, checkout |coc-list-target| for properties.

						*coc-list-target*

Target contains following properties:

'label' - mandatory properity that shown in buffer.
'filtertext' - optional filter text used for filter items.
'location' - optional location of item, checkout https://bit.ly/2Rtb6Bo
'data' - optional additional properties.

------------------------------------------------------------------------------

LIST SOURCES 						*coc-list-sources*

------------------------------------------------------------------------------

location 			   			 *coc-list-location*

	Last jump locations.

	Actions:

	- 'preview' : preview location in preview window.
	- 'open': open location by use
		`"coc.preferences.openResourceCommand"`, default action
	- 'tabe': Use |:tabe| to open location.
	- 'drop': Use |:drop| to open location.
	- 'vsplit': Use |:vsplit| to open location.
	- 'split': Use |:split| to open location.

------------------------------------------------------------------------------

extensions 						 *coc-list-extensions*

	Manage coc extensions.

	Actions:

	- 'toggle' activate/deactivate extension, default action.
	- 'disable' disable extension.
	- 'enable' enable extension.
	- 'reload' reload extension.
	- 'uninstall' uninstall extension.

------------------------------------------------------------------------------

diagnostics 						 *coc-list-diagnostics*

	All diagnostics of workspace.

	Actions:

	- See |coc-list-location|

------------------------------------------------------------------------------

outline 						 *coc-list-outline*

	Symbols of current document.

	Actions:

	- See |coc-list-location|

------------------------------------------------------------------------------

symbols 						 *coc-list-symbols*

	Search workspace symbols.

	Actions:

	- See |coc-list-location|

------------------------------------------------------------------------------

services 						 *coc-list-services*

	Manage registed services.

	Actions:

	- 'toggle': toggle service state, default action.

------------------------------------------------------------------------------

commands 						 *coc-list-commands*

	Workspace commands.

	Actions:

	- 'run': run selected command, default action.

------------------------------------------------------------------------------

links 							 *coc-list-links*

	Links of current document.

	Actions:

	- 'open': open the link, default action.
	- 'jump': jump to link definition.

------------------------------------------------------------------------------

output 							 *coc-list-output*

	Current output channels

	Actions:

	- 'open': open output channel in split window, default action.

------------------------------------------------------------------------------

sources 						 *coc-list-sources*

	Available completion sources.

	Actions:

	- 'toggle': activate/deactivate source, default action.
	- 'refresh': refresh source.
	- 'open': open the file where source defined.

------------------------------------------------------------------------------

lists 							 *coc-list-lists*

	Get available lists.

	Actions:

	- 'open': open selected list, default action.


==============================================================================

STATUSLINE SUPPORT 				*coc-status*

Diagnostic info and other status info contributed by extensions could be shown
in statusline.

The easiest way is add `%{coc#status()}` to your 'statusline' option.

------------------------------------------------------------------------------

						*coc-status-manual*

Create function:
>
	function! StatusDiagnostic() abort
	  let info = get(b:, 'coc_diagnostic_info', {})
	  if empty(info) | return '' | endif
	  let msgs = []
	  if get(info, 'error', 0)
	    call add(msgs, 'E' . info['error'])
	  endif
	  if get(info, 'warning', 0)
	    call add(msgs, 'W' . info['warning'])
	  endif
	  return join(msgs, ' ') . ' ' . get(g:, 'coc_status', '')
	endfunction
<
Add `%{StatusDiagnostic()}` to your 'statusline' option.

------------------------------------------------------------------------------

						*coc-status-airline*

With vim-airline: https://github.com/vim-airline/vim-airline

Add configuration like: >

	" if you want to disable auto detect, comment out those two lines
	"let g:airline#extensions#disable_rtp_load = 1
	"let g:airline_extensions = ['branch', 'hunks', 'coc']

	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

Change error symbol:
>
	let airline#extensions#coc#error_symbol = 'Error:'
<
Change warning symbol:
>
	let airline#extensions#coc#error_symbol = 'Warning:'
<
Change error format:
>
	let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
<
Change warning format:
>
	let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

------------------------------------------------------------------------------
						*coc-status-lightline*

With lightline.vim: https://github.com/itchyny/lightline.vim
				
Use configuration like: >

  let g:lightline = {
	\ 'colorscheme': 'wombat',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'cocstatus': 'coc#status'
	\ },
	\ }
<
To your .vimrc

==============================================================================
CUSTOM SOURCE					*coc-custom-source*

Create custom source in viml is supported.

Check out https://github.com/neoclide/coc.nvim/wiki/Create-custom-source

==============================================================================
FAQ						*coc-faq*

Q: 	I don't want preview window on completion.

A: 	Use `set completeopt-=preview` in your `.vimrc`

Q: 	I want to use ale for diagnostics.

A: 	Yes, you can make coc send diagnostics to ale, just add >

	"coc.preferences.diagnostic.displayByAle": false,
<
	to your coc-settings.json

Q: 	I want codeLens feature of LSP.

A: 	CodeLens support use virtual text feature of neovim, its's not enabled by
	default, to make it works, add: >

	  "coc.preferences.codeLens.enable": true,
<
	to your coc-settings.json

Q: 	I want to highlight codes in markdown documentation.

A: 	Use a markdown plugin which could provide fency code highlight,
	like https://github.com/tpope/vim-markdown, and use settings like:
>
  	let g:markdown_fenced_languages = ['css', 'js=javascript']
<
	in your .vimrc.


==============================================================================
CHANGELOG					*coc-changelog*

Check out ../history.md

==============================================================================
vim:tw=78:nosta:noet:ts=8:sts=0:ft=help:noet:fen:fdm=marker:

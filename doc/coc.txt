*coc-nvim.txt*				LSP support for vim & neovim.

Version: 0.0.32
Author: Qiming Zhao <chemzqm at gmail.com>
License: MIT license

CONTENTS					*coc-contents*

Introduction					|coc-introduction|
Requirement					|coc-requirement|
Install						|coc-install|
Configuration 					|coc-configuration|
Completion   					|coc-completion|
LanguageServer 					|coc-languageserver|
Interface					|coc-interface|
  Keymapings 					|coc-keymapings|
  Variables					  |coc-variables|
  Functions					  |coc-functions|
  Commands					  |coc-commands|
  Autocmds 					  |coc-autocmds|
  Highlights 					  |coc-highlights|
Denite support 					|coc-denite|
  Denite extension  				|coc-denite-extension|
  Denite source  				|coc-denite-source|
  Denite diagnostic     			|coc-denite-diagnostic|
  Denite symbols        			|coc-denite-symbols|
  Denite workspace      			|coc-denite-workspace|
  Denite service        			|coc-denite-service|
  Denite command        			|coc-denite-command|
Statueline support      			|coc-status|
  Manual                			|coc-status-manual|
  Airline 					|coc-status-airline|
  Lightline  					|coc-stauts-lightline|
Faq						|coc-faq|
Changelog					|coc-changelog|

==============================================================================
INTRODUCTION					*coc-introduction*

Coc.nvim tries to provide best experience of LSP features, especially for
completion.

It works with extensions featured as extensions of VSCode, and
you can configure coc to work with custom language server as well.

==============================================================================
REQUIREMENT					*coc-requirement*

Note: this plugin requires neovim > 0.3 or vim > 8.1.

If version not match, this plugin would not be loaded at all.

==============================================================================
INSTALL						*coc-install*

Use plugin manager, like https://github.com/junegunn/vim-plug by add: >

  Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

to your `init.vim` and run: >

  :PlugInstall

For other plugin manager, run `:coc#util#install()` after plugin is loaded,
this command would download latest coc binary from github release page.

==============================================================================
CONFIGURATION					*coc-configuration*

The same as VSCode, Coc use jsonc formated file named `coc-settings.json` for
configuration.

Use command |:CocConfig| to open user configuration file, or create
`.vim/coc-settings.json` for workspace configuration.

Autocompletion of json file would be enabled after `coc-json` extension
installed.

Check out https://github.com/neoclide/coc.nvim/wiki/Using-configuration-file
for detail.

==============================================================================
COMPLETION					*coc-completion*

The completion of coc is triggered automatically by default, you can change
some of completion behavior be using configuration file.

To disable automatic trigger, use: >

	"coc.preferences.autoTrigger": "none",
<
To enable trigger after insert enter, use: >

	"coc.preferences.triggerAfterInsertEnter": true,

To change the timeout of completion, use: >

	"coc.preferences.timeout": 500,
<
To make the first complete item selected automatically, use: >

	"coc.preferences.noselect": false,
<
To make completion triggered with two input characters, use: >

	"coc.preferences.minTriggerInputLength": 2
<
To enable commit characters feature, use: >

	"coc.preferences.acceptSuggestionOnCommitCharacter": true
<
To change the indicator of snippet item, use: >

	"coc.preferences.snippetIndicator": "⭐︎"

------------------------------------------------------------------------------

Configure your vim to improve completion experience:

Setup kepmap for trigger completion, use: >

	inoremap <silent><expr> <c-space> coc#refresh()
<
Use `<cr>` for confirm completion, use: >

	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"
<
Note: `snippet` and `additionalTextEdit` feature only work after completion is
confirmed.

Use <C-j> and <C-k> to jump forward and backward of snippet placeholders: >

	let g:coc_snippet_next = '<c-j>'
	let g:coc_snippet_prev = '<c-k>'

Check out https://github.com/neoclide/coc.nvim/wiki/Configuration-of-completion
for more tips.

==============================================================================
LANGUAGESERVER					*coc-languageserver*

Coc have support for every language server features in the LSP specification,
checkout

https://github.com/neoclide/coc.nvim/wiki/Language-servers#supported-features

for a complete list.

==============================================================================
INTERFACE					*coc-interface*

------------------------------------------------------------------------------

Coc doesn't comes with any default keymap, you need to configure yourself.

Keymapings 					*coc-keymapings*

Note: Mapping starts with 'i_' works for insert mode 'n_' works for normal
mode, 'v_' works for visual mode.

<Plug>(coc-diagnostic-info) 			*n_coc-diagnostic-info*

			Show diagnostic message of current position, no
			truncate.

<Plug>(coc-diagnostic-next) 			*n_coc-diagnostic-next*
			
			Jump to next diagnostic position.

<Plug>(coc-diagnostic-prev) 			*n_coc-diagnostic-prev*
			
			Jump to previous diagnostic position.

<Plug>(coc-definition) 				*n_coc-definition*

			Jump to definition of current symbol.

<Plug>(coc-implementation) 			*n_coc-implementation*

			Jump to implementations of current symbol.

<Plug>(coc-type-definition) 			*n_coc-type-definition*

			Jump to type definition of current symbol.

<Plug>(coc-references) 				*n_coc-references*

			Jump to references of current symbol.

<Plug>(coc-format-selected) 			*n_coc-format-selected*
						*v_coc-format-selected*

			Format selected range, would work in both visual mode
			and normal mode, when work in normal mode, the
			selections works on motion object.

	For example: >

	vmap <leader>p  <Plug>(coc-format-selected)
	nmap <leader>p  <Plug>(coc-format-selected)
<
	makes `<leader>p` format visual selected range, and you can use
	`<leader>pap` to format a paragraph.

<Plug>(coc-format) 				*n_coc-format*

			Format whole buffer, normally you would like to use a
			command like: >

	command! -nargs=0 Format :call CocAction('format')
<
			to format current buffer.

<Plug>(coc-rename) 				*n_coc-rename*

			Rename symbol under cursor to a new word.

<Plug>(coc-codeaction) 				*n_coc-codeaction*

			Get and run code action(s) for current line.

<Plug>(coc-codeaction-selected) 		*n_coc-codeaction-selected*
						*v_coc-codeaction-selected*

			Get and run code action(s) with selected region.
			Works with both normal and visual mode.


<Plug>(coc-openlink) 				*n_coc-openlink*

			Open link under cursor.

<Plug>(coc-codelens-action) 			*n_coc-codelens-action*

			Do command from codeLens of current line.

------------------------------------------------------------------------------
VARIABLES 					*coc-variables*

g:coc_auto_copen  				*g:coc_auto_copen*

			Open quickfix window after quickfix changed by coc.

			Default: 1

g:rooter_patterns 				*g:rooter_patterns*

			To specify how to identify a project's root directory >

			let g:rooter_patterns = ['Rakefile', '.git/']
<
			default to `['.vim/', '.git/', '.hg/', '.projections.json']`


g:coc_snippet_next                            	*g:coc_snippet_next*

			Trigger key for goto next snippet position, applied
			on insert and select mode.

			Default: <C-j>

g:coc_snippet_prev                            	*g:coc_snippet_prev*

			Trigger key for goto previous snippet position,
			applied on insert and select mode.

			Default: <C-k>

g:coc_filetype_map 				*g:coc_filetype_map*

			Map for document filetype so server could handle it as
			expected, ex: >
			
			let g:coc_filetype_map = {
				\ 'html.swig': 'html',
				\ 'wxss': 'css',
				\ }
<
			Default: {}

			Note: coc will always map filetype `javascript.jsx` to
			`javascriptreact` and `typescript.tsx` to
			`typescriptreact`.

g:coc_selectmode_mapping			*g:coc_selectmode_mapping*

			Add key mappings for make snippet select mode easier.  >
			
			snoremap <silent> <BS> <c-g>c
			snoremap <silent> <DEL> <c-g>c
			snoremap <silent> <c-h> <c-g>c
			snoremap <c-r> <c-g>"_c<c-r>
<
			Default: 1

g:coc_node_path 				*g:coc_node_path*

			Path to node executable to start coc service. ex: >

			let g:coc_node_path = '/usr/local/opt/node@10/bin/node'
<
			Use this when coc have problem with your system node,
			it doen't take effect if coc service started by binary
			build of coc.

g:coc_force_debug  				*g:coc_force_debug*

			Coc would use precompiled binary when the binary file
			exists, set this to 1 to use compiled code instead of
			prebuild binary.

			Default: 0

g:coc_node_rpc_debug 				*g:coc_node_rpc_debug*

			If truthy, log channel communication by using
			|ch_logfile|. Vim only.

			Use `:call nvim#rpc#open_log()` to open log file.

			Default: 0

g:vim_node_rpc_folder 				*g:vim_node_rpc_folder*

			Folder contains `vim-node-rpc` module, used for speed
			up vim startup.

			Default: undefined

g:coc_denite_quickfix_action 			*g:coc_denite_quickfix_action*

			Defaut action for open file in denite quickfix list.
			Could be `open`, `drop`, `preview` and `cc` (use |:cc| command).

			Defaut: 'open'

g:coc_jump_locations 				*g:coc_jump_locations*

			When setting `"coc.preferences.useQuickfixForLocations"`
			is `false` , this variable would be set to jump
			locations when autocmd |CocLocationsChange| fired
			(quickfix of vim would be untouched). Each location
			item contains:

			'filename': full file path.
			'lnum': line number (1 based).
			'col': column number(1 based).
			'text':  line content of location.

g:coc_node_rpc_command 				*g:coc_node_rpc_command*


			Command used to start vim-node-rpc on vim.
			Doesn't exists on neovim.

g:coc_process_pid 				*g:coc_process_pid*

			Process pid of coc service.

------------------------------------------------------------------------------

Some variables are provided by coc.nvim so your can use them in your
statusline. See |coc-status| for detail.

b:coc_diagnostic_info 				*b:coc_diagnostic_info*

			Diagnostic information of current buffer, the format
			would like:

			`{'error': 0, 'warning': 0, 'information': 0, 'hint':0}`

			can be used for customize statusline. See |coc-status|.

g:coc_status 					*g:coc_status*

			Status string contributed by extensions, used for
			status line.

------------------------------------------------------------------------------
FUNCTIONS 					*coc-functions*

Coc functions are normally used by user defined command/keymap or other
plugins.

Note: coc functions only work after the coc service is initialized, it will
silently fails if the service is not enabled. To run a function on startup,
use autocmd like: >

 	autocmd User CocNvimInit call s:CocAction('runCommand',
						\ 'tsserver.watchBuild')

<
						*CocAction()*
CocAction({action}, [...{args}])

	Run {action} of coc with optional extra {args}.

						*CocActionAsync()*

CocActionAsync({action, [...{args}], {callback}})

	Call CocAction in none block way, callback is called with `error` and
	`response`.

						*CocRequest()*
CocRequest({id}, {method}, [{params}])

	Send request to language client of {id} with {method} and optional
	{params}. eg: >

	call CocRequest('tslint', 'textDocument/tslint/allFixes',
		\  {'textDocument': {'uri': 'file:///tmp'}})
<
	vim error would raise when request response with error.

						*CocRequestAsync()*
CocRequestAsync({id}, {method}, [{params}, {callback}])

	Async request for remote language client. {callback} is called with
	error and response.

						*CocLocations()*
CocLocations({id}, {method}, [{params}, {openCommand}])

	Send location request to language client of {id} with
	{method} and optional {params}. eg: >

	call CocLocations('ccls', '$ccls/call',  {'callee': v:true})

	call CocLocations('ccls', '$ccls/call',  {}, 'vsplit')
<
	{openCommand}: optional command to open buffer, default to
	`coc.preferences.openResourceCommand` in `coc-settings.json`

Available Actions ~

"sourceStat" 					*coc-action-sourceStat*
	
	get the list of completion source stats for current buffer.

"refreshSource" [{source}]  			*coc-action-refreshSource*

	refresh all sources or {source} as name of source.

"toggleSource" {source} 			*coc-action-toggleSource*

	enable/disable {source}.

"diagnosticList" 				*coc-action-diagnosticList*

	Get all diagnostic items of current neovim session.

"diagnosticInfo" 				*coc-action-diagnosticInfo*

	Show diagnostic message at current position, no truncate.

"jumpDefinition" [{openCommand}] 		*coc-action-jumpDefinition*

	jump to definition position of current symbol. Use <C-o> and <C-i> to
	jump forward and backward.

	Quickfix list is used when more than one position available.

	{openCommand}: optional command to open buffer, default to
	`coc.preferences.openResourceCommand` in `coc-settings.json`

"jumpImplementation" [{openCommand}] 		*coc-action-jumpImplementation*

	Jump to implementation position of current symbol.

	Quickfix list is used when more than one position available.

	{openCommand}: same as "jumpDefinition".

"jumpTypeDefinition" [{openCommand}] 		*coc-action-jumpTypeDefinition*

	Jump to type definition position of current symbol.

	Quickfix list is used when more than one position available.

	{openCommand}: same as "jumpDefinition".

"jumpReferences" [{openCommand}]		*coc-action-jumpReferences*

	Jump to references position of current symbol.

	Quickfix list is used when more than one position available.

	{openCommand}: same as "jumpDefinition".

"doHover" 					*coc-action-doHover*

	Show documentation of current word at preview window.

	Note: the behavior would change when floating windows available for
	neovim.

"showSignatureHelp" 				*coc-action-showSignatureHelp*

	Echo signature help of current function, you may want to setup autocmd
	like this: >

	autocmd CursorHoldI,CursorMovedI * call CocAction('showSignatureHelp')
<

"documentSymbols" 				*coc-action-documentSymbols*

	Get symbol list of current document.

	Used by |coc-denite-symbols|

"rename" 					*coc-action-rename*

	Do rename for symbol under cursor position, user would be prompted for
	new name.

"workspaceSymbols" 				*coc-action-workspaceSymbols*

	Search for workspace symbols.

	Used for |coc-denite-workspace|.

	Note: the experience would be improved when floating window feature
	launched.

"services" 					*coc-action-services*

	Get all services information list.

	Used for |coc-denite-service|

"toggleService" {serviceId} 			*coc-action-toggleService*

	Start or stop one service, used for |coc-denite-service|

"format" 					*coc-action-format*

	Format current buffer using language server.

	Note: some format provider only does indent while others include
	pretty functionality.

"formatSelected" [{mode}] 			*coc-action-formatSelected*

	Format selected range, {mode} should be one of visual mode: `v` , `V`,
	`char`, `line`.

	When {mode} omited, it should be called using |formatexpr|.
	

"codeAction" [{mode}] 				*coc-action-codeAction*

	prompty for a code action and do it.

	{mode} should be result of visualmode(), when used in visualmode,
	could be empty string for none visualmode.


"codeLensAction" 				*coc-action-codeLensAction*


	Invoke command for codeLens of current line (or the line contains
	codeLens just before). Prompt would be shown when multiple actions
	available.

"commands" 					*coc-action-commands*

	Get available global service command id list of current buffer.

"runCommand" [{name}] 				*coc-action-runCommand*

	Run global command provided by language server, if {name} not
	provided, a prompt of command list is shown for select.

	You can bind your custom command like: >

	command! -nargs=0 OrganizeImport :call CocAction('runCommand', 'typescript.organizeImports')

"fold" {{kind}} 				*coc-action-fold*

	Fold current buffer, optional use {kind} for filter folds, {kind}
	could be 'comment', 'imports' and 'region'

"highlight" 					*coc-action-highlight*

	Highlight symbols under cursor.  To use different colors, overwrite
	highlight groups: `CocHighlightText`, `CocHighlightRead` and
	`CocHighlightWrite`

	To enable highlight on CursorHold, create autocmd like: >

	autocmd CursorHold * silent call CocAction('highlight')
<
"openLink" [{command}] 				*coc-action-openlink*

	Open link under cursor with {command}.
	{command} default to `edit`.
	File and url links are supported.
	
"extensionStats" 				*coc-action-extensionStats*

	Get all extension states as list. Including `id`, `root` and `state`

	State could be `disabled`, `activated` and `loaded`

"toggleExtension" {id} 				*coc-action-toggleExtension*

	Enable/disable an extension.

"uninstallExtension" {id} 			*coc-action-uninstallExtension*

	Uninstall an extension.

"reloadExtension" {id} 				*coc-action-reloadExtension*

	Reload activated extension.

"deactivateExtension" {id} 			*coc-action-deactivateExtension*

	Deactivate extension of {id}.

"pickColor" 					*coc-action-pickColor*

	Change color at current color position.

	Requires language server support document color request.

"colorPresentation"  				*coc-action-colorPresentation*

	Change color presentation at current color position.

	Requires language server support color representation request.

"quickfixes" 					*coc-action-quickfixes*

	Get all quickfix codeActions of current buffer.

	Could be used with |CocDiagnosticChange| autocmd to get available fix
	actions.

"doCodeAction" {codeAction} 			*coc-action-doCodeAction*

	Do a codeAction.

"doQuickfix" 					*coc-action-doQuickfix*

	Run quickfix actions of current line.

------------------------------------------------------------------------------

						*coc#config()*
coc#config({section}, {value})

	Change user configuration by vim script, no changes would be made to
	user configuration file. ex: >

	call coc#config('coc.preferences', {
		\ 'timeout': 1000,
		\ 'hoverTarget': 'echo',
		\ 'languageserver': {
		\   'ccls': {
		\     "command": "ccls",
      		\     "trace.server": "verbose",
      		\     "filetypes": ["c", "cpp", "objc", "objcpp"]
		\   }
		\ }
		\})
<

	Note: this function could be called multiple times.

	Note: this function could be called before service initialized.

	Note: this function could works with user configuration file, but it's
	not recommended to use both.


						*coc#refresh()*
coc#refresh()

	Start or refresh completion at current cursor position, bind this to
	'imap' for trigger completion, ex: >

	inoremap <silent><expr> <c-space> coc#refresh()
<
						*coc#status()*
coc#status()

	Return status string for used in status line, the status
	including diagnostic information from `b:coc_diagnostic_info`
	and extension contributed status from `g:coc_status`,
	for statusline integration, see |coc-status|

						*health#coc#check()*
health#coc#check()
	
	Neovim only, run health check, triggered by ':checkhealth'
	command.

						*nvim#rpc#open_log*

nvim#rpc#open_log()

	Open log of channel, vim only. Set |g:coc_node_rpc_debug| to 1 to
	enable log.

------------------------------------------------------------------------------

COMMANDS 					*coc-commands*


:CocDisable 					*:CocDisable*
		Disable all events of coc

:CocEnable 					*:CocEnable*
		Enable events of coc

:CocRestart 					*:CocRestart*

		Restart coc service.

		Use this command when you want coc start all over again.

:CocConfig 					*:CocConfig*

		Edit user config file `coc-setting.json`

:CocErrors 					*:CocErrors*

		Show error messages from `stderr` of coc server, use this to
		get messages when coc unexpected exited.

		Use `let $NODE_DEBUG=nvim*` to debug communication between
		node-client and neovim.

:CocInstall {names} 				*:CocInstall*

		Install one or more coc extensions.

		Checkout https://www.npmjs.com/search?q=keywords%3Acoc.nvim for
		available extensions.

:CocUninstall {name} 				*:CocUnInstall*

		Uninstall an extension, use <tab> to complete extension name.

:CocUpdate 					*:CocUpdate*

		Update all coc extensions to latest version.

:CocRebuild 					*:CocRebuild*

		Run `npm rebuild` for coc extensions.

		May required if coc not started by binary and nodejs get
		upgraded.

:CocCommand {name} [{args}]			*:CocCommand*

		Run command contributed by extensions, use `<tab>` for name
		completion.

:CocOpenLog 					*:CocOpenLog*

		Open log file of coc.nvim, to change log level (default `info`),
		use environment variable `NVIM_COC_LOG_LEVEL`. ex: >
		
		export NVIM_COC_LOG_LEVEL=debug
<
		or add: >
		
		let $NVIM_COC_LOG_LEVEL='debug'
<
		at the beggining of your `.vimrc` (before plugin loaded).

		The log file is cleared after vim started, to get the log file
		in your terminal, run command: >

		node -e 'console.log(path.join(os.tmpdir(), "coc-nvim.log"))'
		
<
:CocInfo 					*:CocInfo*

		Show some information in `info` output channel, useful for bug
		report.

------------------------------------------------------------------------------

AUTOCMD 					*coc-autocmds*

						*CocQuickfixChange*

:autocmd User CocQuickfixChange {command}

		Used for open a custom view for quickfix results, disable
		default quickfix list open by set: >

		let g:coc_auto_copen = 0
<
		To use |denite.nvim| for open quickfix list: >

		autocmd User CocQuickfixChange :Denite -mode=normal quickfix
<
		To use |fzf| for open quickfix list: >

		autocmd User CocQuickfixChange :call fzf_quickfix#run()
<
						*CocLocationsChange*


:autocmd User CocLocationsChange {command}

		When quickfix for locations is disabled by
		`coc.preferences.useQuickfixForLocations` in
		`coc-settings.json`, you can use this autocmd with
		|g:coc_jump_locations| for build custom list view.

						*CocNvimInit*
:autocmd User CocNvimInit {command}

		Triggered after coc services started.

		If you want trigger action of coc after vim started, this
		autocmd should be used because coc always start in async.

						*CocDiagnosticChange*

:autocmd User CocDiagnosticChange {command}

		Triggered after diagnostic status changed.

		Could be used for update statusline.

						*CocJumpPlaceholder*

:autocmd User CocJumpPlaceholder {command}

		Triggered after jump placeholder. Can be used for trigger
		signature help like: >

	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

------------------------------------------------------------------------------

HIGHLIGHTS 					*coc-highlights*

CocErrorSign 					*CocErrorSign*

  Default: `hi CocErrorSign  ctermfg=Red guifg=#ff0000`

  The highlight used for error signs.

CocWarningSign 					*CocWarningSign*

  Default: `hi CocWarningSign  ctermfg=Brown guifg=#ff922b`

  The highlight used for warning signs.

CocInfoSign 					*CocInfoSign*

  Default: `hi CocInfoSign  ctermfg=Yellow guifg=#fab005`

  The highlight used for information signs.

CocHintSign 					*CocHintSign*

  Default: `hi CocHintSign  ctermfg=Blue guifg=#15aabf`

  The highlight used for hint signs.

CocErrorHighlight 				*CocErrorHighlight*

  Default: `hi default link CocErrorHighlight   CocUnderline`

  The highlight used for error text.

CocWarningHighlight 				*CocWarningHighlight*

  Default: `hi default link CocWarningHighlight   CocUnderline`

  The highlight used for warning text.

CocInfoHighlight 				*CocInfoHighlight*

  Default: `hi default link CocInfoHighlight   CocUnderline`

  The highlight used for information text.

CocHintHighlight 				*CocHintHighlight*

  Default: `hi default link CocHintHighlight   CocUnderline`

  The highlight used for hint text.

CocHighlightText 				*CocHighlightText*

  Default `hi default CocHighlightText  guibg=#111111 ctermbg=223`

  The highlight used for document highlight feature, normally used for
  highlight same symbols of buffer at current cursor position.

CocHighlightTextRead 				*CocHighlightTextRead*

  Default `hi default link CocHighlightRead  CocHighlightText`

  Highlight for `Read` kind of document symbol.

CocHighlightTextWrite 				*CocHighlightTextWrite*

  Default `hi default link CocHighlightWrite  CocHighlightText`

  Highlight for `Write` kind of document symbol.

CocErrorLine 					*CocErrorLine*

  Default `undefined`

  Highlight for line with diagnostic error.

CocWarningLine 					*CocWarningLine*

  Default `undefined`

  Highlight for line with diagnostic warning.

CocInfoLine 					*CocInfoLine*

  Default `undefined`

  Highlight for line with diagnostic information.

CocHintLine 					*CocHintLine*

  Default `undefined`

  Highlight for line with diagnostic hint.

CocCodeLens 					*CocCodeLens*

  Default: ``ctermfg=Gray    guifg=#999999`

  Highlight group of virtual text for codeLens.

To customize the highlight, simply use |:highlight| command of vim in your
vimrc, like: >
	
	" make error text to red color
	highlight CocErrorHighlight ctermfg=Red  guifg=#ff0000
<

==============================================================================
DENITE SUPPORT 					*coc-denite*

Coc provide some |denite.nvim| sources for better list filter & sort experience
and actions.

------------------------------------------------------------------------------
						*coc-denite-extension*
:Denite coc-extension

	Manage extensions using denite interface.

	Actions:

	'toggle': enable/disable selected extensions, it's persisted.

	'activate': activate selected extension(s).

	'deactivate': deactivate selected extension(s).

	'reload': reload selected extension(s).

	'uninstall': uninstall selected extension(s).


------------------------------------------------------------------------------
						*coc-denite-source*
:Denite coc-source

	Show all sources of coc completion.

	Actions:

	'toggle': enable/disable the source(s) for current vim sesion.

	'refresh': refresh selected source(s).

------------------------------------------------------------------------------
						*coc-denite-diagnostic*
:Denite coc-diagnostic

	Show all diagnostics of current vim sesion.

	Actions: same as file kind.

------------------------------------------------------------------------------
:Denite coc-workspace 				*coc-denite-workspace*

	Search workspace symbols using denite buffer.

	Actions: same as file kind.

------------------------------------------------------------------------------
						*coc-denite-symbols*
:Denite coc-symbols

	Show symbols of current buffer.

	Actions: same as file kind.

------------------------------------------------------------------------------
						*coc-denite-service*
:Denite coc-service

	Manage coc services.

	Actions:

	- 'toggle' : default action for start/stop service.

------------------------------------------------------------------------------
						*coc-denite-command*
:Denite coc-command

	Find and run commands contributed by extensions.

	Actions:

	- 'run' : default action.

==============================================================================
STATUSLINE SUPPORT 				*coc-status*

Diagnostic info and other status info contributed by extensions could be shown
in statusline of your vim.

------------------------------------------------------------------------------

						*coc-status-manual*

Create function:
>
	function! StatusDiagnostic() abort
	  let info = get(b:, 'coc_diagnostic_info', {})
	  if empty(info) | return '' | endif
	  let msgs = []
	  if get(info, 'error', 0)
	    call add(msgs, 'E' . info['error'])
	  endif
	  if get(info, 'warning', 0)
	    call add(msgs, 'W' . info['warning'])
	  endif
	  return join(msgs, ' ') . ' ' . get(g:, 'coc_status', '')
	endfunction
<
Add `%{StatusDiagnostic()}` to your 'statusline' option.

------------------------------------------------------------------------------

						*coc-status-airline*

With vim-airline: https://github.com/vim-airline/vim-airline

Add configuration like: >

	" if you want to disable auto detect, comment out those two lines
	"let g:airline#extensions#disable_rtp_load = 1
	"let g:airline_extensions = ['branch', 'hunks', 'coc']

	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

Change error symbol:
>
	let airline#extensions#coc#error_symbol = 'Error:'
<
Change warning symbol:
>
	let airline#extensions#coc#error_symbol = 'Warning:'
<
Change error format:
>
	let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
<
Change warning format:
>
	let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

------------------------------------------------------------------------------
						*coc-status-lightline*

With lightline.vim: https://github.com/itchyny/lightline.vim
				
Use configuration like: >

  let g:lightline = {
	\ 'colorscheme': 'wombat',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'cocstatus': 'coc#status'
	\ },
	\ }
<
To your .vimrc

==============================================================================
CUSTOM SOURCE					*coc-custom-source*

Create custom source in viml is supported.

Check out https://github.com/neoclide/coc.nvim/wiki/Create-custom-source

==============================================================================
FAQ						*coc-faq*

Check out https://github.com/neoclide/coc.nvim/wiki/F.A.Q

==============================================================================
CHANGELOG					*coc-changelog*

Check out ../history.md

==============================================================================
vim:tw=78:nosta:noet:ts=8:sts=0:ft=help:noet:fen:fdm=marker:

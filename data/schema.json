{
  "$schema": "http://json-schema.org/draft-06/schema",
  "description": "Configuration file for coc.nvim",
  "additionalProperties": false,
  "definitions": {
    "languageServerBase": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "default": true
        },
        "cwd": {
          "type": "string",
          "default": "",
          "description": "Working directory of languageserver, absolute path or relative to workspace folder, use workspace root by default"
        },
        "env": {
          "type": "object",
          "default": null,
          "description": "Environment variables for child process."
        },
        "stdioEncoding": {
          "type": "string",
          "default": "utf8",
          "description": "Encoding used for stdio of child process."
        },
        "rootPatterns": {
          "type": "array",
          "default": [],
          "description": "Root patterns used for reoslve rootPath from current file, default to workspace root",
          "items": {
            "type": "string"
          }
        },
        "requireRootPattern": {
          "type": "boolean",
          "default": false,
          "description": "If true, doesn't start server when root pattern not found."
        },
        "ignoredRootPaths": {
          "type": "array",
          "default": [],
          "description": "Absolute root paths that language server should not use as rootPath, higher priority than rootPatterns.",
          "items": {
            "type": "string"
          }
        },
        "filetypes": {
          "type": "array",
          "default": [],
          "description": "Supported filetypes, use empty array for all filetypes.",
          "items": {
            "type": "string"
          }
        },
        "revealOutputChannelOn": {
          "type": "string",
          "default": "never",
          "description": "Configure message level to show the output channel buffer",
          "enum": ["info", "warn", "error", "never"]
        },
        "initializationOptions": {
          "type": "object",
          "default": {},
          "description": "initializationOptions passed to languageserver"
        },
        "settings": {
          "type": "object",
          "default": {},
          "description": "Settings of languageserver"
        },
        "trace.server": {
          "type": "string",
          "default": "off",
          "enum": ["off", "messages", "verbose"],
          "description": "Trace level of communication between server and client"
        }
      }
    },
    "languageServerSocket": {
      "type": "object",
      "allOf": [{"$ref": "#/definitions/languageServerBase"}],
      "required": ["port", "filetypes"],
      "additionalProperties": false,
      "properties": {
        "port": {
          "type": "integer",
          "description": "Port number of socket server"
        },
        "host": {
          "type": "string",
          "default": "127.0.0.1",
          "description": "Host of server"
        },
        "enable": {},
        "rootPatterns": {},
        "requireRootPattern": {},
        "ignoredRootPaths": {},
        "filetypes": {},
        "revealOutputChannelOn": {},
        "initializationOptions": {},
        "settings": {},
        "stdioEncoding": {},
        "trace.server": {}
      }
    },
    "languageServerModule": {
      "type": "object",
      "allOf": [{"$ref": "#/definitions/languageServerBase"}],
      "required": ["module", "filetypes"],
      "additionalProperties": false,
      "properties": {
        "module": {
          "type": "string",
          "default": "",
          "description": "Absolute path of javascript file, should works in IPC mode"
        },
        "args": {
          "type": "array",
          "default": [],
          "description": "Extra arguments of module",
          "items": {
            "type": "string"
          }
        },
        "runtime": {
          "type": "string",
          "default": "",
          "description": "Absolute path of node runtime."
        },
        "execArgv": {
          "type": "array",
          "default": [],
          "description": "Argv passed to node when using module, normally used for debugging, ex: [\"--nolazy\", \"--inspect-brk=6045\"]",
          "items": {
            "type": "string"
          }
        },
        "transport": {
          "type": "string",
          "default": "ipc",
          "description": "Transport kind used by server, could be 'ipc', 'stdio', 'socket' and 'pipe'",
          "enum": ["ipc", "stdio", "socket", "pipe"]
        },
        "transportPort": {
          "type": "integer",
          "description": "Port number used when transport is 'socket'"
        },
        "cwd": {},
        "env": {},
        "enable": {},
        "rootPatterns": {},
        "requireRootPattern": {},
        "ignoredRootPaths": {},
        "filetypes": {},
        "revealOutputChannelOn": {},
        "initializationOptions": {},
        "stdioEncoding": {},
        "settings": {},
        "trace.server": {}
      }
    },
    "languageServerCommand": {
      "type": "object",
      "required": ["command", "filetypes"],
      "allOf": [{"$ref": "#/definitions/languageServerBase"}],
      "additionalProperties": false,
      "properties": {
        "command": {
          "type": "string",
          "default": "",
          "description": "Executable in $PATH to start languageserver, should not used with module"
        },
        "args": {
          "type": "array",
          "default": [],
          "description": "Arguments of command",
          "items": {
            "type": "string"
          }
        },
        "detached": {
          "type": "boolean",
          "default": false,
          "description": "Detach the languageserver process"
        },
        "shell": {
          "type": "boolean",
          "default": false,
          "description": "Use shell for process"
        },
        "cwd": {},
        "env": {},
        "enable": {},
        "rootPatterns": {},
        "requireRootPattern": {},
        "ignoredRootPaths": {},
        "filetypes": {},
        "revealOutputChannelOn": {},
        "initializationOptions": {},
        "stdioEncoding": {},
        "settings": {},
        "trace.server": {}
      }
    }
  },
  "properties": {
    "coc.preferences.autoTrigger": {
      "type": "string",
      "default": "always",
      "description": "How should completion be triggered",
      "enum": ["always", "trigger", "none"]
    },
    "coc.preferences.languageSourcePriority": {
      "type": "number",
      "default": 99,
      "description": "Priority of language sources."
    },
    "coc.preferences.numberSelect": {
      "type": "boolean",
      "description": "Input number to select complete item, it could wrong when using <up> and <down> to select complete item",
      "default": false
    },
    "coc.preferences.snippetIndicator": {
      "type": "string",
      "default": "~",
      "description": "The character used in abbr of complete item to indicate the item could be expand as snippet."
    },
    "coc.preferences.snippetStatusText": {
      "type": "string",
      "default": "SNIP",
      "description": "Text shown in statusline to indicate snippet session is activated."
    },
    "coc.preferences.maxCompleteItemCount": {
      "type": "number",
      "default": 50,
      "description": "Maxmium number of complete items shown in vim"
    },
    "coc.preferences.preferCompleteThanJumpPlaceholder": {
      "type": "boolean",
      "description": "Confirm completion instead of jump to next placeholder when completion is activted.",
      "default": false
    },
    "coc.preferences.invalidInsertCharacters": {
      "type": "array",
      "default": ["<", "(", ":", " "],
      "description": "Invalid character for strip valid word when inserting text of snippet complete item.",
      "items": {
        "type": "string"
      }
    },
    "coc.preferences.fixInsertedWord": {
      "type": "boolean",
      "description": "Make inserted word replace word characters after cursor position.",
      "default": true
    },
    "coc.preferences.localityBonus": {
      "type": "boolean",
      "description": "Boost suggestions that appear closer to the cursor position.",
      "default": true
    },
    "coc.preferences.triggerAfterInsertEnter": {
      "type": "boolean",
      "description": "Trigger completion after InsertEnter, auto trigger should be always to enable this option",
      "default": false
    },
    "coc.preferences.timeout": {
      "type": "integer",
      "default": 2000,
      "minimum": 500,
      "maximum": 5000,
      "description": "Timeout for completion, in miliseconds."
    },
    "coc.preferences.minTriggerInputLength": {
      "type": "number",
      "default": 1,
      "description": "Mininal input length for trigger completion, default 1"
    },
    "coc.preferences.triggerCompletionWait": {
      "type": "integer",
      "default": 60,
      "minimum": 50,
      "maximum": 300,
      "description": "Wait time between trigger character type and completion start, for wait server content synchronize."
    },
    "coc.preferences.echodocSupport": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, add function signature to user_data.signature to support echodoc.vim"
    },
    "coc.preferences.acceptSuggestionOnCommitCharacter": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character."
    },
    "coc.preferences.noselect": {
      "type": "boolean",
      "description": "Not make vim select first item on completion start",
      "default": true
    },
    "coc.preferences.extensionUpdateCheck": {
      "type": "string",
      "default": "daily",
      "description": "Interval for check extension update, could be daily, weekly, never",
      "enum": ["daily", "weekly", "never"]
    },
    "coc.preferences.hoverTarget": {
      "type": "string",
      "default": "preview",
      "description": "Target to show hover information, default is preview window, could also be echo",
      "enum": ["preview", "echo"]
    },
    "coc.preferences.colorSupport": {
      "type": "boolean",
      "description": "Enable color highlight if language server support it.",
      "default": true
    },
    "coc.preferences.parseKeywordsLimitLines": {
      "type": "number",
      "description": "Limit the lines of buffer for parse keywords on change.",
      "default": 30000
    },
    "coc.preferences.hyphenAsKeyword": {
      "type": "boolean",
      "description": "Always consider `-` as keyword character when parsing buffer for keywords.",
      "default": true
    },
    "coc.preferences.triggerSignatureHelp": {
      "type": "boolean",
      "description": "Show signature help when trigger character typed.",
      "default": true
    },
    "coc.preferences.formatOnSaveFiletypes": {
      "type": "array",
      "default": [],
      "description": "Filetypes that should run format on save.",
      "items": {
        "type": "string"
      }
    },
    "coc.preferences.rootPatterns": {
      "type": "array",
      "default": [".vim", ".git", ".hg", ".projections.json"],
      "description": "General root patterns to resolve project root from file to parent folders, it's overwrited by rootPatterns of specific languageserver.",
      "items": {
        "type": "string"
      }
    },
    "coc.preferences.watchmanPath": {
      "type": "string",
      "description": "executable path for https://facebook.github.io/watchman/, detected from $PATH by default",
      "default": null
    },
    "coc.preferences.openResourceCommand": {
      "type": "string",
      "description": "Command used for open resource.",
      "default": "edit",
      "enum": ["edit", "split", "vsplit", "tabe"]
    },
    "coc.preferences.jumpCommand": {
      "type": "string",
      "description": "Command used for location jump, like goto definition, goto references etc.",
      "default": "edit"
    },
    "coc.preferences.messageLevel": {
      "type": "string",
      "description": "Message level for filter echoed messages, could be 'more', 'warning' and 'error'",
      "default": "more",
      "enum": ["more", "warning", "error"]
    },
    "coc.preferences.formatOnType": {
      "type": "boolean",
      "description": "Set to true to enable format on type",
      "default": false
    },
    "coc.preferences.snippets.enable": {
      "type": "boolean",
      "description": "Set to false to disable snippets",
      "default": true
    },
    "coc.preferences.diagnostic.level": {
      "type": "string",
      "description": "Used for filter diagnostics by diagnostic severity.",
      "default": "hint",
      "enum": ["hint", "information", "warning", "error"]
    },
    "coc.preferences.diagnostic.refreshOnInsertMode": {
      "type": "boolean",
      "description": "Enable diagnostic refresh on insert mode",
      "default": false
    },
    "coc.preferences.diagnostic.enable": {
      "type": "boolean",
      "description": "Set to false to disable diagnostic display",
      "default": true
    },
    "coc.preferences.diagnostic.displayByAle": {
      "type": "boolean",
      "description": "Use Ale for display diagnostics in vim, will disable coc for display diagnostics.",
      "default": false
    },
    "coc.preferences.diagnostic.virtualText": {
      "type": "boolean",
      "description": "Use NeoVim virtual text to display diagnostics",
      "default": false
    },
    "coc.preferences.diagnostic.virtualTextPrefix": {
      "type": "string",
      "description": "The prefix added virtual text diagnostics",
      "default": " "
    },
    "coc.preferences.diagnostic.virtualTextLines": {
      "type":"number",
      "description": "The number of non empty lines from a diagnostic to display",
      "default": 1
    },
    "coc.preferences.diagnostic.virtualTextLineSeparator": {
      "type":"string",
      "description": "The text that will mark a line end from the diagnostic message",
      "default": " \\ "
    },
    "coc.preferences.diagnostic.enableMessage": {
      "type": "string",
      "default": "always",
      "description": "When to enable echo messages of diagnostics.",
      "enum": ["always", "jump", "never"]
    },
    "coc.preferences.diagnostic.locationlist": {
      "type": "boolean",
      "description": "Create location list for error & warning",
      "default": true
    },
    "coc.preferences.diagnostic.highlightOffset": {
      "type": "number",
      "description": "Offset number of buffer.addHighlight, neovim only.",
      "default": 1000
    },
    "coc.preferences.diagnostic.signOffset": {
      "type": "number",
      "description": "Offset number of sign",
      "default": 1000
    },
    "coc.preferences.diagnostic.errorSign": {
      "type": "string",
      "description": "Text of error sign",
      "default": ">>"
    },
    "coc.preferences.diagnostic.warningSign": {
      "type": "string",
      "description": "Text of warning sign",
      "default": "⚠"
    },
    "coc.preferences.diagnostic.infoSign": {
      "type": "string",
      "description": "Text of info sign",
      "default": ">>"
    },
    "coc.preferences.diagnostic.hintSign": {
      "type": "string",
      "description": "Text of hint sign",
      "default": ">>"
    },
    "coc.preferences.codeLens.enable": {
      "type": "boolean",
      "description": "Enable codeLens feature, require neovim with set virtual text feature.",
      "default": false
    },
    "coc.preferences.codeLens.separator": {
      "type": "string",
      "description": "Separator text for codeLens in virtual text",
      "default": "‣"
    },
    "coc.source.around.enable": {
      "type": "boolean",
      "default": true
    },
    "coc.source.around.shortcut": {
      "type": "string",
      "default": "A"
    },
    "coc.source.around.priority": {
      "type": "integer",
      "default": 1
    },
    "coc.source.buffer.enable": {
      "type": "boolean",
      "default": true
    },
    "coc.source.buffer.shortcut": {
      "type": "string",
      "default": "B"
    },
    "coc.source.buffer.priority": {
      "type": "integer",
      "default": 1
    },
    "coc.source.buffer.ignoreGitignore": {
      "type": "boolean",
      "default": true,
      "description": "Ignore git ignored files for buffer words"
    },
    "coc.source.file.enable": {
      "type": "boolean",
      "default": true
    },
    "coc.source.file.shortcut": {
      "type": "string",
      "default": "F"
    },
    "coc.source.file.priority": {
      "type": "integer",
      "default": 10
    },
    "coc.source.file.triggerCharacters": {
      "type": "array",
      "default": ["/"],
      "items": {
        "type": "string"
      }
    },
    "coc.source.file.trimSameExts": {
      "type": "array",
      "default": [".ts", ".js"],
      "description": "Trim same extension on file completion",
      "items": {
        "type": "string"
      }
    },
    "coc.source.file.ignoreHidden": {
      "type": "boolean",
      "default": true,
      "description": "Ignore completion for hidden files"
    },
    "coc.source.file.ignorePatterns": {
      "type": "array",
      "default": [],
      "description": "Ignore patterns of matcher",
      "items": {
        "type": "string"
      }
    },
    "list.indicator": {
      "type": "string",
      "default": ">",
      "description": "The characer used as first characer in prompt line"
    },
    "list.maxHeight": {
      "type": "number",
      "default": 12,
      "description": "Maxmium height of list window."
    },
    "list.signOffset": {
      "type": "number",
      "default": 900,
      "description": "Sign offset of list, should be different from other plugins."
    },
    "list.selectedSignText": {
      "type": "string",
      "default": "*",
      "description": "Sign text for selected lines."
    },
    "list.autoResize": {
      "type": "boolean",
      "default": true,
      "description": "Enable auto resize feature."
    },
    "list.limitLines": {
      "type": "number",
      "default": 3000,
      "description": "Limit lines for list buffer."
    },
    "list.previewHighlightGroup": {
      "type": "string",
      "default": "Search",
      "description": "Highlight group used for highlight the range in preview window."
    },
    "list.nextKeymap": {
      "type": "string",
      "default": "<C-j>",
      "description": "Key used for select next line on insert mode."
    },
    "list.previousKeymap": {
      "type": "string",
      "default": "<C-k>",
      "description": "Key used for select previous line on insert mode."
    },
    "list.normalMappings": {
      "type": "object",
      "default": {},
      "description": "Custom keymappings on normal mode."
    },
    "list.insertMappings": {
      "type": "object",
      "default": {},
      "description": "Custom keymappings on insert mode."
    },
    "http.proxy": {
      "type": "string",
      "default": "",
      "description": "http proxy used for json server"
    },
    "http.proxyStrictSSL": {
      "type": "boolean",
      "default": true
    },
    "languageserver": {
      "type": "object",
      "default": {},
      "description": "Dictionary of languageservers, key is used as id of languageserver.",
      "patternProperties": {
        "^[_a-zA-Z]+$": {
          "oneOf": [
            {
              "$ref": "#/definitions/languageServerModule"
            },
            {
              "$ref": "#/definitions/languageServerCommand"
            },
            {
              "$ref": "#/definitions/languageServerSocket"
            }
          ]
        }
      }
    }
  }
}
